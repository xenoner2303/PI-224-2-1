// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    [Migration("20250601191655_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("DAL.Entities.AbstractSecretCodeRealizator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodeUses")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RealizatorType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretCodeHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SecretCodeRealizators");

                    b.HasDiscriminator<string>("RealizatorType").HasValue("AbstractSecretCodeRealizator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DAL.Entities.AbstractUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DAL.Entities.ActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("DAL.Entities.AuctionLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManagerId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelativeImagePath")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ManagerId1");

                    b.HasIndex("OwnerId");

                    b.ToTable("AuctionLots");
                });

            modelBuilder.Entity("DAL.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("LotId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DAL.Entities.AdministratorSecretCodeRealization", b =>
                {
                    b.HasBaseType("DAL.Entities.AbstractSecretCodeRealizator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("DAL.Entities.ManagerSecretCodeRealizator", b =>
                {
                    b.HasBaseType("DAL.Entities.AbstractSecretCodeRealizator");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("DAL.Entities.Administrator", b =>
                {
                    b.HasBaseType("DAL.Entities.AbstractUser");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DAL.Entities.Manager", b =>
                {
                    b.HasBaseType("DAL.Entities.AbstractUser");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DAL.Entities.RegisteredUser", b =>
                {
                    b.HasBaseType("DAL.Entities.AbstractUser");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("DAL.Entities.AuctionLot", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Lots")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Manager", null)
                        .WithMany("ManagedLots")
                        .HasForeignKey("ManagerId");

                    b.HasOne("DAL.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.RegisteredUser", "Owner")
                        .WithMany("OwnLots")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manager");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DAL.Entities.Bid", b =>
                {
                    b.HasOne("DAL.Entities.AuctionLot", "Lot")
                        .WithMany("Bids")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.RegisteredUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DAL.Entities.AuctionLot", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("DAL.Entities.Manager", b =>
                {
                    b.Navigation("ManagedLots");
                });

            modelBuilder.Entity("DAL.Entities.RegisteredUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("OwnLots");
                });
#pragma warning restore 612, 618
        }
    }
}
